// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/payment/service/v1/payment.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePaymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreatePaymentRequestValidationError is the validation error returned by
// CreatePaymentRequest.Validate if the designated constraints aren't met.
type CreatePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentRequestValidationError) ErrorName() string {
	return "CreatePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentRequestValidationError{}

// Validate checks the field values on CreatePaymentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreatePaymentReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreatePaymentReplyValidationError is the validation error returned by
// CreatePaymentReply.Validate if the designated constraints aren't met.
type CreatePaymentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreatePaymentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreatePaymentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreatePaymentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreatePaymentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreatePaymentReplyValidationError) ErrorName() string {
	return "CreatePaymentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreatePaymentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreatePaymentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreatePaymentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreatePaymentReplyValidationError{}

// Validate checks the field values on UpdatePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePaymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdatePaymentRequestValidationError is the validation error returned by
// UpdatePaymentRequest.Validate if the designated constraints aren't met.
type UpdatePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePaymentRequestValidationError) ErrorName() string {
	return "UpdatePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePaymentRequestValidationError{}

// Validate checks the field values on UpdatePaymentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePaymentReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdatePaymentReplyValidationError is the validation error returned by
// UpdatePaymentReply.Validate if the designated constraints aren't met.
type UpdatePaymentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePaymentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePaymentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePaymentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePaymentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePaymentReplyValidationError) ErrorName() string {
	return "UpdatePaymentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePaymentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePaymentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePaymentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePaymentReplyValidationError{}

// Validate checks the field values on DeletePaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeletePaymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeletePaymentRequestValidationError is the validation error returned by
// DeletePaymentRequest.Validate if the designated constraints aren't met.
type DeletePaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePaymentRequestValidationError) ErrorName() string {
	return "DeletePaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePaymentRequestValidationError{}

// Validate checks the field values on DeletePaymentReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeletePaymentReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeletePaymentReplyValidationError is the validation error returned by
// DeletePaymentReply.Validate if the designated constraints aren't met.
type DeletePaymentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeletePaymentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeletePaymentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeletePaymentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeletePaymentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeletePaymentReplyValidationError) ErrorName() string {
	return "DeletePaymentReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeletePaymentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeletePaymentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeletePaymentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeletePaymentReplyValidationError{}

// Validate checks the field values on GetPaymentRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetPaymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetPaymentRequestValidationError is the validation error returned by
// GetPaymentRequest.Validate if the designated constraints aren't met.
type GetPaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentRequestValidationError) ErrorName() string {
	return "GetPaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentRequestValidationError{}

// Validate checks the field values on GetPaymentReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetPaymentReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetPaymentReplyValidationError is the validation error returned by
// GetPaymentReply.Validate if the designated constraints aren't met.
type GetPaymentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPaymentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPaymentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPaymentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPaymentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPaymentReplyValidationError) ErrorName() string { return "GetPaymentReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetPaymentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPaymentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPaymentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPaymentReplyValidationError{}

// Validate checks the field values on ListPaymentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPaymentRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListPaymentRequestValidationError is the validation error returned by
// ListPaymentRequest.Validate if the designated constraints aren't met.
type ListPaymentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPaymentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPaymentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPaymentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPaymentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPaymentRequestValidationError) ErrorName() string {
	return "ListPaymentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPaymentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPaymentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPaymentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPaymentRequestValidationError{}

// Validate checks the field values on ListPaymentReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListPaymentReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListPaymentReplyValidationError is the validation error returned by
// ListPaymentReply.Validate if the designated constraints aren't met.
type ListPaymentReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPaymentReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPaymentReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPaymentReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPaymentReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPaymentReplyValidationError) ErrorName() string { return "ListPaymentReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListPaymentReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPaymentReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPaymentReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPaymentReplyValidationError{}
