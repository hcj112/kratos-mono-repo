// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/colection/service/v1/colection.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateColectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateColectionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for TargetId

	return nil
}

// CreateColectionRequestValidationError is the validation error returned by
// CreateColectionRequest.Validate if the designated constraints aren't met.
type CreateColectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateColectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateColectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateColectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateColectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateColectionRequestValidationError) ErrorName() string {
	return "CreateColectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateColectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateColectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateColectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateColectionRequestValidationError{}

// Validate checks the field values on CreateColectionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateColectionReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateColectionReplyValidationError is the validation error returned by
// CreateColectionReply.Validate if the designated constraints aren't met.
type CreateColectionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateColectionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateColectionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateColectionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateColectionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateColectionReplyValidationError) ErrorName() string {
	return "CreateColectionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateColectionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateColectionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateColectionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateColectionReplyValidationError{}

// Validate checks the field values on ListColectionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListColectionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for Limit

	// no validation rules for Type

	return nil
}

// ListColectionRequestValidationError is the validation error returned by
// ListColectionRequest.Validate if the designated constraints aren't met.
type ListColectionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListColectionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListColectionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListColectionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListColectionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListColectionRequestValidationError) ErrorName() string {
	return "ListColectionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListColectionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListColectionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListColectionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListColectionRequestValidationError{}

// Validate checks the field values on ListColectionReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListColectionReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListColectionReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListColectionReplyValidationError is the validation error returned by
// ListColectionReply.Validate if the designated constraints aren't met.
type ListColectionReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListColectionReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListColectionReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListColectionReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListColectionReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListColectionReplyValidationError) ErrorName() string {
	return "ListColectionReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListColectionReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListColectionReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListColectionReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListColectionReplyValidationError{}

// Validate checks the field values on ListColectionReply_Data with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListColectionReply_Data) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Banner

	return nil
}

// ListColectionReply_DataValidationError is the validation error returned by
// ListColectionReply_Data.Validate if the designated constraints aren't met.
type ListColectionReply_DataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListColectionReply_DataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListColectionReply_DataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListColectionReply_DataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListColectionReply_DataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListColectionReply_DataValidationError) ErrorName() string {
	return "ListColectionReply_DataValidationError"
}

// Error satisfies the builtin error interface
func (e ListColectionReply_DataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListColectionReply_Data.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListColectionReply_DataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListColectionReply_DataValidationError{}
