// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ColectionClient is the client API for Colection service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ColectionClient interface {
	CreateColection(ctx context.Context, in *CreateColectionRequest, opts ...grpc.CallOption) (*CreateColectionReply, error)
	ListColection(ctx context.Context, in *ListColectionRequest, opts ...grpc.CallOption) (*ListColectionReply, error)
}

type colectionClient struct {
	cc grpc.ClientConnInterface
}

func NewColectionClient(cc grpc.ClientConnInterface) ColectionClient {
	return &colectionClient{cc}
}

func (c *colectionClient) CreateColection(ctx context.Context, in *CreateColectionRequest, opts ...grpc.CallOption) (*CreateColectionReply, error) {
	out := new(CreateColectionReply)
	err := c.cc.Invoke(ctx, "/api.colection.service.v1.Colection/CreateColection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *colectionClient) ListColection(ctx context.Context, in *ListColectionRequest, opts ...grpc.CallOption) (*ListColectionReply, error) {
	out := new(ListColectionReply)
	err := c.cc.Invoke(ctx, "/api.colection.service.v1.Colection/ListColection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ColectionServer is the server API for Colection service.
// All implementations must embed UnimplementedColectionServer
// for forward compatibility
type ColectionServer interface {
	CreateColection(context.Context, *CreateColectionRequest) (*CreateColectionReply, error)
	ListColection(context.Context, *ListColectionRequest) (*ListColectionReply, error)
	mustEmbedUnimplementedColectionServer()
}

// UnimplementedColectionServer must be embedded to have forward compatible implementations.
type UnimplementedColectionServer struct {
}

func (UnimplementedColectionServer) CreateColection(context.Context, *CreateColectionRequest) (*CreateColectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateColection not implemented")
}
func (UnimplementedColectionServer) ListColection(context.Context, *ListColectionRequest) (*ListColectionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListColection not implemented")
}
func (UnimplementedColectionServer) mustEmbedUnimplementedColectionServer() {}

// UnsafeColectionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ColectionServer will
// result in compilation errors.
type UnsafeColectionServer interface {
	mustEmbedUnimplementedColectionServer()
}

func RegisterColectionServer(s grpc.ServiceRegistrar, srv ColectionServer) {
	s.RegisterService(&Colection_ServiceDesc, srv)
}

func _Colection_CreateColection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateColectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColectionServer).CreateColection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.colection.service.v1.Colection/CreateColection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColectionServer).CreateColection(ctx, req.(*CreateColectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Colection_ListColection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListColectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ColectionServer).ListColection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.colection.service.v1.Colection/ListColection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ColectionServer).ListColection(ctx, req.(*ListColectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Colection_ServiceDesc is the grpc.ServiceDesc for Colection service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Colection_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.colection.service.v1.Colection",
	HandlerType: (*ColectionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateColection",
			Handler:    _Colection_CreateColection_Handler,
		},
		{
			MethodName: "ListColection",
			Handler:    _Colection_ListColection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/colection/service/v1/colection.proto",
}
