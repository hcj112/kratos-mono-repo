// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/product/service/v1/product.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CatalogId

	if utf8.RuneCountInString(m.GetName()) < 10 {
		return CreateProductRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 10 runes",
		}
	}

	// no validation rules for Desc

	// no validation rules for Banner

	if val := m.GetPrice(); val <= 0 || val > 12000 {
		return CreateProductRequestValidationError{
			field:  "Price",
			reason: "value must be inside range (0, 12000]",
		}
	}

	return nil
}

// CreateProductRequestValidationError is the validation error returned by
// CreateProductRequest.Validate if the designated constraints aren't met.
type CreateProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductRequestValidationError) ErrorName() string {
	return "CreateProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductRequestValidationError{}

// Validate checks the field values on CreateProductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateProductReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Banner

	return nil
}

// CreateProductReplyValidationError is the validation error returned by
// CreateProductReply.Validate if the designated constraints aren't met.
type CreateProductReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProductReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProductReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProductReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProductReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProductReplyValidationError) ErrorName() string {
	return "CreateProductReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProductReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProductReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProductReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProductReplyValidationError{}

// Validate checks the field values on UpdateProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for CatalogId

	if utf8.RuneCountInString(m.GetName()) < 10 {
		return UpdateProductRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 10 runes",
		}
	}

	// no validation rules for Desc

	// no validation rules for Banner

	if val := m.GetPrice(); val <= 0 || val > 12000 {
		return UpdateProductRequestValidationError{
			field:  "Price",
			reason: "value must be inside range (0, 12000]",
		}
	}

	return nil
}

// UpdateProductRequestValidationError is the validation error returned by
// UpdateProductRequest.Validate if the designated constraints aren't met.
type UpdateProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductRequestValidationError) ErrorName() string {
	return "UpdateProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductRequestValidationError{}

// Validate checks the field values on UpdateProductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateProductReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateProductReplyValidationError is the validation error returned by
// UpdateProductReply.Validate if the designated constraints aren't met.
type UpdateProductReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProductReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProductReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProductReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProductReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProductReplyValidationError) ErrorName() string {
	return "UpdateProductReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProductReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProductReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProductReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProductReplyValidationError{}

// Validate checks the field values on DeleteProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteProductRequestValidationError is the validation error returned by
// DeleteProductRequest.Validate if the designated constraints aren't met.
type DeleteProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductRequestValidationError) ErrorName() string {
	return "DeleteProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductRequestValidationError{}

// Validate checks the field values on DeleteProductReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteProductReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteProductReplyValidationError is the validation error returned by
// DeleteProductReply.Validate if the designated constraints aren't met.
type DeleteProductReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProductReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProductReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProductReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProductReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProductReplyValidationError) ErrorName() string {
	return "DeleteProductReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProductReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProductReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProductReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProductReplyValidationError{}

// Validate checks the field values on GetProductRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetProductRequestValidationError is the validation error returned by
// GetProductRequest.Validate if the designated constraints aren't met.
type GetProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductRequestValidationError) ErrorName() string {
	return "GetProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductRequestValidationError{}

// Validate checks the field values on GetProductReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetProductReply) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Desc

	// no validation rules for Banner

	// no validation rules for Price

	return nil
}

// GetProductReplyValidationError is the validation error returned by
// GetProductReply.Validate if the designated constraints aren't met.
type GetProductReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProductReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProductReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProductReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProductReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProductReplyValidationError) ErrorName() string { return "GetProductReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetProductReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProductReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProductReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProductReplyValidationError{}

// Validate checks the field values on ListProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProductRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for Limit

	return nil
}

// ListProductRequestValidationError is the validation error returned by
// ListProductRequest.Validate if the designated constraints aren't met.
type ListProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductRequestValidationError) ErrorName() string {
	return "ListProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductRequestValidationError{}

// Validate checks the field values on ListProductReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListProductReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetProList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductReplyValidationError{
					field:  fmt.Sprintf("ProList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProductReplyValidationError is the validation error returned by
// ListProductReply.Validate if the designated constraints aren't met.
type ListProductReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductReplyValidationError) ErrorName() string { return "ListProductReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListProductReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductReplyValidationError{}

// Validate checks the field values on CreateCatalogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCatalogRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// CreateCatalogRequestValidationError is the validation error returned by
// CreateCatalogRequest.Validate if the designated constraints aren't met.
type CreateCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCatalogRequestValidationError) ErrorName() string {
	return "CreateCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCatalogRequestValidationError{}

// Validate checks the field values on CreateCatalogReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateCatalogReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateCatalogReplyValidationError is the validation error returned by
// CreateCatalogReply.Validate if the designated constraints aren't met.
type CreateCatalogReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCatalogReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCatalogReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCatalogReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCatalogReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCatalogReplyValidationError) ErrorName() string {
	return "CreateCatalogReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCatalogReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCatalogReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCatalogReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCatalogReplyValidationError{}

// Validate checks the field values on UpdateCatalogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCatalogRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// UpdateCatalogRequestValidationError is the validation error returned by
// UpdateCatalogRequest.Validate if the designated constraints aren't met.
type UpdateCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCatalogRequestValidationError) ErrorName() string {
	return "UpdateCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCatalogRequestValidationError{}

// Validate checks the field values on UpdateCatalogReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCatalogReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateCatalogReplyValidationError is the validation error returned by
// UpdateCatalogReply.Validate if the designated constraints aren't met.
type UpdateCatalogReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCatalogReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCatalogReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCatalogReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCatalogReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCatalogReplyValidationError) ErrorName() string {
	return "UpdateCatalogReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCatalogReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCatalogReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCatalogReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCatalogReplyValidationError{}

// Validate checks the field values on DeleteCatalogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCatalogRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteCatalogRequestValidationError is the validation error returned by
// DeleteCatalogRequest.Validate if the designated constraints aren't met.
type DeleteCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCatalogRequestValidationError) ErrorName() string {
	return "DeleteCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCatalogRequestValidationError{}

// Validate checks the field values on DeleteCatalogReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteCatalogReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteCatalogReplyValidationError is the validation error returned by
// DeleteCatalogReply.Validate if the designated constraints aren't met.
type DeleteCatalogReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCatalogReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCatalogReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCatalogReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCatalogReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCatalogReplyValidationError) ErrorName() string {
	return "DeleteCatalogReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCatalogReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCatalogReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCatalogReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCatalogReplyValidationError{}

// Validate checks the field values on ListCatalogRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCatalogRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for Limit

	return nil
}

// ListCatalogRequestValidationError is the validation error returned by
// ListCatalogRequest.Validate if the designated constraints aren't met.
type ListCatalogRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCatalogRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCatalogRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCatalogRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCatalogRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCatalogRequestValidationError) ErrorName() string {
	return "ListCatalogRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCatalogRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCatalogRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCatalogRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCatalogRequestValidationError{}

// Validate checks the field values on ListCatalogReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListCatalogReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCatalogReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListCatalogReplyValidationError is the validation error returned by
// ListCatalogReply.Validate if the designated constraints aren't met.
type ListCatalogReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCatalogReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCatalogReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCatalogReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCatalogReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCatalogReplyValidationError) ErrorName() string { return "ListCatalogReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListCatalogReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCatalogReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCatalogReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCatalogReplyValidationError{}

// Validate checks the field values on ListProductReply_Pro with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProductReply_Pro) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Desc

	// no validation rules for Banner

	// no validation rules for Price

	return nil
}

// ListProductReply_ProValidationError is the validation error returned by
// ListProductReply_Pro.Validate if the designated constraints aren't met.
type ListProductReply_ProValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductReply_ProValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductReply_ProValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductReply_ProValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductReply_ProValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductReply_ProValidationError) ErrorName() string {
	return "ListProductReply_ProValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductReply_ProValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductReply_Pro.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductReply_ProValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductReply_ProValidationError{}

// Validate checks the field values on ListCatalogReply_Catalog with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListCatalogReply_Catalog) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	return nil
}

// ListCatalogReply_CatalogValidationError is the validation error returned by
// ListCatalogReply_Catalog.Validate if the designated constraints aren't met.
type ListCatalogReply_CatalogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCatalogReply_CatalogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCatalogReply_CatalogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCatalogReply_CatalogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCatalogReply_CatalogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCatalogReply_CatalogValidationError) ErrorName() string {
	return "ListCatalogReply_CatalogValidationError"
}

// Error satisfies the builtin error interface
func (e ListCatalogReply_CatalogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCatalogReply_Catalog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCatalogReply_CatalogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCatalogReply_CatalogValidationError{}
