// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/shopcar/service/v1/shopcar.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on CreateShopcarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateShopcarRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProductId

	return nil
}

// CreateShopcarRequestValidationError is the validation error returned by
// CreateShopcarRequest.Validate if the designated constraints aren't met.
type CreateShopcarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShopcarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShopcarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShopcarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShopcarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShopcarRequestValidationError) ErrorName() string {
	return "CreateShopcarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShopcarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShopcarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShopcarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShopcarRequestValidationError{}

// Validate checks the field values on CreateShopcarReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateShopcarReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// CreateShopcarReplyValidationError is the validation error returned by
// CreateShopcarReply.Validate if the designated constraints aren't met.
type CreateShopcarReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShopcarReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShopcarReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShopcarReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShopcarReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShopcarReplyValidationError) ErrorName() string {
	return "CreateShopcarReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShopcarReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShopcarReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShopcarReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShopcarReplyValidationError{}

// Validate checks the field values on DeleteShopcarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteShopcarRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ShopCarId

	return nil
}

// DeleteShopcarRequestValidationError is the validation error returned by
// DeleteShopcarRequest.Validate if the designated constraints aren't met.
type DeleteShopcarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShopcarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShopcarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShopcarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShopcarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShopcarRequestValidationError) ErrorName() string {
	return "DeleteShopcarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShopcarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShopcarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShopcarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShopcarRequestValidationError{}

// Validate checks the field values on DeleteShopcarReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteShopcarReply) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteShopcarReplyValidationError is the validation error returned by
// DeleteShopcarReply.Validate if the designated constraints aren't met.
type DeleteShopcarReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteShopcarReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteShopcarReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteShopcarReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteShopcarReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteShopcarReplyValidationError) ErrorName() string {
	return "DeleteShopcarReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteShopcarReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteShopcarReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteShopcarReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteShopcarReplyValidationError{}

// Validate checks the field values on ListShopcarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListShopcarRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Page

	// no validation rules for Limit

	return nil
}

// ListShopcarRequestValidationError is the validation error returned by
// ListShopcarRequest.Validate if the designated constraints aren't met.
type ListShopcarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShopcarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShopcarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShopcarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShopcarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShopcarRequestValidationError) ErrorName() string {
	return "ListShopcarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListShopcarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShopcarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShopcarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShopcarRequestValidationError{}

// Validate checks the field values on ListShopcarReply with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListShopcarReply) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListShopcarReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListShopcarReplyValidationError is the validation error returned by
// ListShopcarReply.Validate if the designated constraints aren't met.
type ListShopcarReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShopcarReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShopcarReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShopcarReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShopcarReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShopcarReplyValidationError) ErrorName() string { return "ListShopcarReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListShopcarReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShopcarReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShopcarReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShopcarReplyValidationError{}

// Validate checks the field values on ListShopcarReply_ShopCarList with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListShopcarReply_ShopCarList) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for ProductName

	// no validation rules for ProductBanner

	return nil
}

// ListShopcarReply_ShopCarListValidationError is the validation error returned
// by ListShopcarReply_ShopCarList.Validate if the designated constraints
// aren't met.
type ListShopcarReply_ShopCarListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListShopcarReply_ShopCarListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListShopcarReply_ShopCarListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListShopcarReply_ShopCarListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListShopcarReply_ShopCarListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListShopcarReply_ShopCarListValidationError) ErrorName() string {
	return "ListShopcarReply_ShopCarListValidationError"
}

// Error satisfies the builtin error interface
func (e ListShopcarReply_ShopCarListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListShopcarReply_ShopCarList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListShopcarReply_ShopCarListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListShopcarReply_ShopCarListValidationError{}
