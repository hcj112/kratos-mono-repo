// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShopcarClient is the client API for Shopcar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShopcarClient interface {
	CreateShopcar(ctx context.Context, in *CreateShopcarRequest, opts ...grpc.CallOption) (*CreateShopcarReply, error)
	DeleteShopcar(ctx context.Context, in *DeleteShopcarRequest, opts ...grpc.CallOption) (*DeleteShopcarReply, error)
	ListShopcar(ctx context.Context, in *ListShopcarRequest, opts ...grpc.CallOption) (*ListShopcarReply, error)
}

type shopcarClient struct {
	cc grpc.ClientConnInterface
}

func NewShopcarClient(cc grpc.ClientConnInterface) ShopcarClient {
	return &shopcarClient{cc}
}

func (c *shopcarClient) CreateShopcar(ctx context.Context, in *CreateShopcarRequest, opts ...grpc.CallOption) (*CreateShopcarReply, error) {
	out := new(CreateShopcarReply)
	err := c.cc.Invoke(ctx, "/api.shopcar.service.v1.Shopcar/CreateShopcar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopcarClient) DeleteShopcar(ctx context.Context, in *DeleteShopcarRequest, opts ...grpc.CallOption) (*DeleteShopcarReply, error) {
	out := new(DeleteShopcarReply)
	err := c.cc.Invoke(ctx, "/api.shopcar.service.v1.Shopcar/DeleteShopcar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shopcarClient) ListShopcar(ctx context.Context, in *ListShopcarRequest, opts ...grpc.CallOption) (*ListShopcarReply, error) {
	out := new(ListShopcarReply)
	err := c.cc.Invoke(ctx, "/api.shopcar.service.v1.Shopcar/ListShopcar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShopcarServer is the server API for Shopcar service.
// All implementations must embed UnimplementedShopcarServer
// for forward compatibility
type ShopcarServer interface {
	CreateShopcar(context.Context, *CreateShopcarRequest) (*CreateShopcarReply, error)
	DeleteShopcar(context.Context, *DeleteShopcarRequest) (*DeleteShopcarReply, error)
	ListShopcar(context.Context, *ListShopcarRequest) (*ListShopcarReply, error)
	mustEmbedUnimplementedShopcarServer()
}

// UnimplementedShopcarServer must be embedded to have forward compatible implementations.
type UnimplementedShopcarServer struct {
}

func (UnimplementedShopcarServer) CreateShopcar(context.Context, *CreateShopcarRequest) (*CreateShopcarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShopcar not implemented")
}
func (UnimplementedShopcarServer) DeleteShopcar(context.Context, *DeleteShopcarRequest) (*DeleteShopcarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShopcar not implemented")
}
func (UnimplementedShopcarServer) ListShopcar(context.Context, *ListShopcarRequest) (*ListShopcarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListShopcar not implemented")
}
func (UnimplementedShopcarServer) mustEmbedUnimplementedShopcarServer() {}

// UnsafeShopcarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShopcarServer will
// result in compilation errors.
type UnsafeShopcarServer interface {
	mustEmbedUnimplementedShopcarServer()
}

func RegisterShopcarServer(s grpc.ServiceRegistrar, srv ShopcarServer) {
	s.RegisterService(&Shopcar_ServiceDesc, srv)
}

func _Shopcar_CreateShopcar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShopcarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopcarServer).CreateShopcar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shopcar.service.v1.Shopcar/CreateShopcar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopcarServer).CreateShopcar(ctx, req.(*CreateShopcarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shopcar_DeleteShopcar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShopcarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopcarServer).DeleteShopcar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shopcar.service.v1.Shopcar/DeleteShopcar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopcarServer).DeleteShopcar(ctx, req.(*DeleteShopcarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shopcar_ListShopcar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListShopcarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShopcarServer).ListShopcar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.shopcar.service.v1.Shopcar/ListShopcar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShopcarServer).ListShopcar(ctx, req.(*ListShopcarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shopcar_ServiceDesc is the grpc.ServiceDesc for Shopcar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shopcar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.shopcar.service.v1.Shopcar",
	HandlerType: (*ShopcarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShopcar",
			Handler:    _Shopcar_CreateShopcar_Handler,
		},
		{
			MethodName: "DeleteShopcar",
			Handler:    _Shopcar_DeleteShopcar_Handler,
		},
		{
			MethodName: "ListShopcar",
			Handler:    _Shopcar_ListShopcar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/shopcar/service/v1/shopcar.proto",
}
